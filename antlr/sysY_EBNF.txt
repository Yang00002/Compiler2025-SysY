//编译单元
compUnit : [ compUnit ] ( decl | funcDef )
//声明
decl : constDecl | varDecl
//常量声明
constDecl : 'const' bType constDef { ',' constDef } ';'
//基本类型
bType : 'int' | 'float'
//常数定义
constDef : ID { '[' constExp ']' } '=' constInitVal
//常量初值
constInitVal : constExp |  '{' [ constInitVal { ',' constInitVal } ] '}'
//变量声明
varDecl : bType varDef { ',' varDef } ';'
//变量定义
varDef : ID { '[' constExp ']' } | ID { '[' constExp ']' } '=' initVal
//变量初值
initVal : exp | '{' [ initVal { ',' initVal } ] '}'
//函数定义
funcDef : funcType ID '(' [funcFParams] ')' block
//函数类型
funcType : 'void' | 'int' | 'float'
//函数形参表
funcFParams : funcFParam { ',' funcFParam }
//函数形参
funcFParam : bType ID ['[' ']' { '[' exp ']' }]
//语句块
block : '{' { blockItem } '}'
//语句块项
blockItem : decl | stmt
//语句
stmt : lVal '=' exp ';' | [exp] ';' | block | 'if' '(' cond ')' stmt [ 'else' stmt ] | 'while' '(' cond ')' stmt | 'break' ';' | 'continue' ';' | 'return' [exp] ';'
//表达式(注： SysY 表达式是 int/float 型表达式)
exp : addExp
//条件表达式
cond : lOrExp
//左值表达式
lVal : ID {'[' exp ']'}
//基本表达式
primaryExp : '(' exp ')' | lVal | number
//数值
number : INT | FLOAT
//一元表达式
unaryExp : primaryExp | ID '(' [funcRParams] ')' | unaryOp unaryExp
//单目运算符(注： '!'仅出现在条件表达式中) 这是语法分析未检查的 该语法也许不允许 !(a == b)
unaryOp : '+' | '−' | '!'
//函数实参表
funcRParams : exp { ',' exp }
//乘除模表达式
mulExp : unaryExp | mulExp ('*' | '/' | '%') unaryExp
//加减表达式
addExp : mulExp | addExp ('+' | '−') mulExp
//关系表达式
relExp : addExp | relExp ('<' | '>' | '<=' | '>=') addExp
//相等性表达式
eqExp : relExp | eqExp ('==' | '!=') relExp
//逻辑与表达式
lAndExp : eqExp | lAndExp '&&' eqExp
//逻辑或表达式
lOrExp : lAndExp | lOrExp '||' lAndExp
//常量表达式(注：使用的 ID 必须是常量)
constExp : addExp
////终结符 注意还有注释 单行注释： 以 // 开始， 直到换行符结束， 不包括换行符；多行注释： 以序列 /* 开始， 直到第一次出现 */ 时结束， 包括结束处 */
ID
INT
FLOAT